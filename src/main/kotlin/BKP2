import java.lang.Exception
import java.lang.NumberFormatException

// Calculator Function

fun calc(a: Int, b: Int, i: String): Int {
    var res2:Int = 0
    if (i == "+") {
        return   a + b
    } else if (i == "-") {
        return  a - b
    } else if (i == "/") {
        return  a / b
    } else if (i == "*") {
        return  a * b
    }
    return 0
}

//initialization of user input

fun init(res:Int): String {
    println("Total=  $res ")
    println("\n" + "Enter your calculation : " + "\nType q to Quit\n")
    var user = readLine().toString()
    return user
}


fun getOper(userInput:String): List<String> {
    //Parse input to operators
    val str = userInput
    var operators = Regex("[-,+,*,/,%]+").findAll(str).map(MatchResult::value).toList()
//Display Just to see the working operators
//            println(numbers)
    return operators
}


fun getNum(userInput:String): List<Int> {
//Parse input to numbers
    val str = userInput
    var numbers = Regex("[0-9.0-9]+").findAll(str).map(MatchResult::value).toList()

//Display Just to see the working operators
//            println(operators)

    val nums = numbers.map { it.toInt()
                    }
    return nums
}



fun main(vararg arg: String) {

//Initiate Result
    var res: Int = 0
    //Initialize counters
    var count: Int = 0
    var firstTime = true


//Run Calculator
    while (true) {
        try {
//Get User Input
            var userInput = init(res)
//Case where user wrote Q to Quit
            if (userInput == "q") {
                println("Calculator has quit")
                break
//Case where user wrote AC to clear
            } else if (userInput.contains("AC")) {
                var userInput = init(0)
//Case where no Operators at all
            } else if (("+" !in userInput) and ("-" !in userInput) and ("/" !in userInput) and ("*" !in userInput)) {
                try {
                    res = userInput.toInt()
                    continue
                } catch (c: Exception) {
                    println("Don't type bullshit\n")
                }
//Case where user wrote operators
            } else {
                var operators = getOper(userInput)
                var nums = getNum(userInput)
                println(nums)
                println(operators)

                if (firstTime == true) {
                    res = calc(nums[0], nums[1], operators[0])
                    firstTime = false
                    count += 1
                } else {
                    for (i in operators) {
                        res = calc(res, nums[count], i)
                        count += 1
                    }
                }
            }

//Just for first run - > to use only 2

//            try {
//
//            } catch (e: ArithmeticException) {
//                println("Error")
//
//            } catch (a: IndexOutOfBoundsException) {
//                userInput = init(res = userInput.toInt())
//            }
//
        } catch (b: NumberFormatException) {
            println("Try Again")
        }
    }
}




//        val values: List<String> = userInput.split(" ")




//for (char in values) {
//    while (!char.isOperator())
//}
//
//fun isOperator(val char: Char) {
//
//    fun Char.contains(s: String) {
//
//    }
//
//

//}
//        if (char.toLong() != null) {
//                var a = StringBuilder()
//                a.append(char)
//                continue
//            }
//
//        break
//    }
//            && userInput.contains("+" ) || userInput.contains("AC" ) || userInput.contains("-/+" )

// Validations
//        if (values.size < 3){
//            println("Invalid input. Expected: value + value. Received: $userInput")
//        }else {
//            /* Inputs from user */
//            val operator: String = values[1]
//            val a = values[0].toDoubleOrNull() ?: throw IllegalArgumentException("Invalid input: ${values[0]}")
//            val b = values[2].toDoubleOrNull() ?: throw IllegalArgumentException("Invalid input: ${values[1]}")

//            /* Checking operator and performing arithmetic operation */
//            when (values[1]) {
//                "+" -> println (a + b)
//                "-" -> println (a - b)
//                "*" -> println (a * b)
//                "/" -> println (a / b)
//            }
//        }
//                else -> throw IllegalArgumentException("Invalid operator: $operator")

//            break
