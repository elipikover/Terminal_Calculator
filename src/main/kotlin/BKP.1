import java.lang.Exception
import java.lang.NumberFormatException

// Calculator Function

fun calc(a: Int, b: Int, i: String): Int {
    var res2:Int = 0
    if (i == "+") {
        return   a + b
    } else if (i == "-") {
        return  a - b
    } else if (i == "/") {
        return  a / b
    } else if (i == "*") {
        return  a * b
    }
    return 0
}

//initialization of user input

fun init(res:Int): String {
    println("Display is  $res ")
    println("\n" + "Enter your calculation : " + "\nType q to Quit")
    var user = readLine().toString()
    return user
}



fun main(vararg arg: String) {

//Initiate Calculator
    var res: Int = 0
    var count2 = 0


    while (true) {
//Check if user wrote Q to quit

        var userInput = init(res)
        var count: Int = 0
        if (userInput == "q") {
            println("Calculator has quit")
            break
        } else if (userInput.contains("AC")) {
            var userInput = init(0)
        } else if (!userInput.contains("+") or !userInput.contains("-") or !userInput.contains("/") or !userInput.contains(
                "*")
        )
//        {
//            try {
//                var userInput = init(userInput.toInt())
//            } catch (c: Exception) {
//                println("Don't type bullshit")
//            }


//Parse input to operators and numbers
            try {
                if (userInput != null && userInput.isNotBlank()) {
                    val str = userInput
                    var numbers = Regex("[0-9.0-9]+").findAll(str)
                        .map(MatchResult::value)
                        .toList()
                    var operators = Regex("[-,+,*,/,%]+").findAll(str)
                        .map(MatchResult::value)
                        .toList()
//Display Just to see the working operators
//            println(operators)

                    val nums = numbers.map { it.toInt() }
//Just for first run - > to use only 2

                    try {
                        if (count2 == 0) {
                            res = calc(nums[0], nums[1], operators[0])
                            count2 += 1
                            count += 1
                        }
                        for (i in operators) {
                            res = calc(res, nums[count], i)
                            count += 1

                        }
                    } catch (e: ArithmeticException) {
                        println("Error")

                    } catch (a: IndexOutOfBoundsException) {
                        userInput = init(res = userInput.toInt())
                    }
                }
            } catch (b: NumberFormatException) {
                println("Error Number is too long")
            }
    }
}



//        val values: List<String> = userInput.split(" ")




//for (char in values) {
//    while (!char.isOperator())
//}
//
//fun isOperator(val char: Char) {
//
//    fun Char.contains(s: String) {
//
//    }
//
//

//}
//        if (char.toLong() != null) {
//                var a = StringBuilder()
//                a.append(char)
//                continue
//            }
//
//        break
//    }
//            && userInput.contains("+" ) || userInput.contains("AC" ) || userInput.contains("-/+" )

// Validations
//        if (values.size < 3){
//            println("Invalid input. Expected: value + value. Received: $userInput")
//        }else {
//            /* Inputs from user */
//            val operator: String = values[1]
//            val a = values[0].toDoubleOrNull() ?: throw IllegalArgumentException("Invalid input: ${values[0]}")
//            val b = values[2].toDoubleOrNull() ?: throw IllegalArgumentException("Invalid input: ${values[1]}")

//            /* Checking operator and performing arithmetic operation */
//            when (values[1]) {
//                "+" -> println (a + b)
//                "-" -> println (a - b)
//                "*" -> println (a * b)
//                "/" -> println (a / b)
//            }
//        }
//                else -> throw IllegalArgumentException("Invalid operator: $operator")

//            break
